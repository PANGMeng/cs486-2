$import aztex-lib/latex.azx
$import aztex-lib/amsmath.azx
$import aztex-lib/graphicx.azx
$import aztex-lib/graphviz.azx
$import aztex-lib/listings.azx

$titlepage{CS 486 - Assignment 3}{Alex Klen \\ 20372654}

@{
  $section{Adversarial Search} {
    $enumerate{
      $item{ % 1
        For each MAX decision step with children #{m_1, ..., m_k} the computed costs MiniMax(MIN, #m_i) are the minimum possible payoffs for MAX when selecting each of those decisions, assuming that MIN is using the same optional strategy. An optimal MIN will, for any MAX choice #{m_i}, the choice that will result in MiniMax(MIN, #m_i). A suboptimal MIN might choose a value which results in a payoff for MAX of greater than MiniMax(MIN, #m_i).
      }
      $item{ % 2
        In the scenario shown below, MiniMax would tell MAX to choose the node with the minimum payoff of 20. However if MAX knows that MIN is not playing optimally and has a high chance of making a mistake when choosing between the 5 and 100 cases, MAX might end up selecting the node with minimum payoff 5 and getting to the goal state with value 100. $nl

        $digraph{scale=1}{minimaxsuboptimal}{
          subgraph cluster0 {
            node [style=filled];
            label="MAX";
            a [label="??"];
          }
          subgraph cluster1 {
            node [style=filled];
            rank=same;
            label="MIN";
            b [label="5"];
            c [label="20"];
            d [label="10"];
          }
          a->b;
          a->c;
          a->d;
          subgraph cluster2 {
            node [style=filled];
            rank=same;
            label="MAX";
            e [label="100"];
            f [label="5"];
            g [label="20"];
            h [label="10"];
          }
          b->{e, f};
          c->g;
          d->h;

          dots1 [label="..."];
          dots2 [label="..."];
          dots3 [label="..."];
          dots4 [label="..."];
          e->dots1;
          f->dots2;
          g->dots3;
          h->dots4;
        }
      }
    }
  }

  $section{Constraint Satisfaction}{
    $subsection{Problem}{
      $nobreak{
        $lstlisting{}{
          ZEROES
          + ONES
          ------
          BINARY
        }
      }
    }
    $subsection{Variables and Constraints}{
      $math{
        Z, E, R, O, S, N, B, I, A, Y $in $braces{0...9} \\
        X_1, X_2, X_3, X_4, X_5 $in $braces{0,1} \\
      }
      $align{
        $label{eq:1}{
          Alldiff&(Z, E, R, O, S, N, B, I, A, Y)
        } \\
        $label{eq:2}{
          S + S       &= Y + X_1 * 10
        }\\
        $label{eq:3}{
          E + E + X_1 &= R + X_2 * 10
        }\\
        $label{eq:4}{
          O + N + X_2 &= A + X_3 * 10
        }\\
        $label{eq:5}{
          R + O + X_3 &= N + X_4 * 10
        }\\
        $label{eq:6}{
          E +     X_4 &= I + X_5 * 10
        }\\
        $label{eq:7}{
          Z +     X_5 &= B
        }\\
        $label{eq:8}{
          Z $ne 0, & O $ne 0, B $ne 0
        }
      }
    }
    $subsection{Solution}{
      By forward checking at the start we can eliminate some choices for the variables.
      $itemize{
        $item{
          Equation $ref{eq:1} says two times #S becomes a one or two digit number, so the ones place must be even: #{Y $in $braces{0, 2, 4, 6, 8}}
        }
        $item{
          Equation $ref{eq:7} forces #{X_5} to be 1, since if it was 0 then #{Z = B}, which violates equation $ref{eq:1}.
        }
        $item{
          Equation $ref{eq:6} now reads #{E + X_4 = I + 10}. Since we know #{X_4 $in $braces{0, 1}}, the only solution here is #{X_4 = 1, E = 9, I = 0}.
        }
      }

      Now I will carry out the backtracking search algorithm.
      $itemize{
        $item{
          The Most Restricted Variable (MRV) heuristic says we should first assign #X_1 , #X_2 , or #X_3 . We'll choose #X_1 . The Least Constraining Value (LCV) heuristic says 1 removes more variable options in Eqs $ref{eq:2} and $ref{eq:3}. Set #{X_1 = 1}.
          $itemize{
            $item{
              MRV: #X_2 . Both values restrict #E and #R to empty sets in Eq $ref{eq:3}. Backtrack.
            }
          }
        }
        $item{
          #{X_1 = 0}.
          $itemize{
            $item{
              #{X_2 = 1}. Setting to 0 causes Eq $ref{eq:3} to restrict #R to the empty set. Forward checking Eq $ref{eq:3} forces to assign #R.$nl
              #{R = 8}.
              $itemize{
                $item{
                  MRV: #X_3. Try #{X_3 = 0}.$nl
                  Current State: #{Y $in $braces{2, 4, 6}. S,N,A,B,Z $in $braces{1,2,3,4,5,6,7}}
                  $itemize{
                    $item{
                      MRV: #Y . LCV doesn't break ties for us here, so we'll try sequentially.$nl
                      #{Y = 2}. Forward checking with Eq $ref{eq:2} forces us to assign #S next.$nl
                      #{S = 1}.
                      $itemize{
                        $item{
                          MRV: #Z (all tied). Try #{Z = 3}. Forward checking forces us to assign #B next.$nl
                          #{B = 4}.
                          $itemize{
                            $item{
                              MRV: #O (tied). Can't assign 5, 6 because Eq $ref{eq:5} will restrict #N to empty set.
                              #{O = 7}. We're forced to assign #N next because of Eq $ref{eq:5}.$nl
                              #{N = 5}. Forward checking with Eq $ref{eq:4} removes all choices from #A . Backtrack.
                            }
                          }
                        }
                        $item{
                          #{Z = 4}. Forward checking forces us to assign #B next.$nl
                          #{B = 5}.
                          $itemize{
                            $item{
                              MRV: #O. Can't assign any because Eq $ref{eq:5} will restrict #N to empty set. Backtrack.
                            }
                          }
                        }
                        $item{
                          #{Z = 5}. Forward checking forces us to assign #B next.$nl
                          #{B = 6}.
                          $itemize{
                            $item{
                              MRV: #O. Can't assign any because Eq $ref{eq:5} will restrict #N to empty set. Backtrack.
                            }
                          }
                        }
                        $item{
                          #{Z = 6}. Forward checking forces us to assign #B next.$nl
                          #{B = 7}.
                          $itemize{
                            $item{
                              MRV: #O. Can't assign 3, 4 because Eq $ref{eq:5} will restrict #N to empty set.
                              #{O = 5}. We're forced to assign #N next because of Eq $ref{eq:5}.$nl
                              #{N = 3}. Forward checking with Eq $ref{eq:4} removes all choices from #A . Backtrack.

                            }
                          }
                        }
                        $item{
                          #Z can't be assigned 7 or higher because of Eq $ref{eq:7}. Backtrack.
                        }
                      }
                    }
                    $item{
                      #{Y = 4}. Forward checking with Eq $ref{eq:2} forces us to assign #S next.$nl
                      #{S = 2}.
                      $itemize{
                        $item{
                          MRV: #Z. #{Z = 1,3} fails forward checking for Eq $ref{eq:7}.
                          #{Z = 5}. Forward checking forces us to assign #B next.
                          #{B = 6}.
                          $itemize{
                            $item{
                              MRV: #O (tied). Can't assign 1, 7 because Eq $ref{eq:5} will restrict #N to empty set.
                              #{O = 3}. We're forced to assign #N next because of Eq $ref{eq:5}.$nl
                              #{N = 1}. Forward checking with Eq $ref{eq:4} removes all choices from #A . Backtrack.
                            }
                          }
                        }
                        $item{
                          #{Z = 6}. Forward checking forces us to assign #B next.
                          #{B = 7}.
                          $itemize{
                            $item{
                              MRV: #O.$nl
                              #{O = 3}. We're forced to assign #N next because of Eq $ref{eq:5}.$nl
                              #{N = 1}. Forward checking with Eq $ref{eq:4} succeeds in leaving an assignment for #A.$nl
                              #{A = 5}. Success.
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      The final assignments found by the above algorithm are: #{X_1 = 0, X_2 = 1, X_3 = 0, X_4 = 1, X_5 = 1, E = 9, I = 0, R = 8, Y = 4, S = 2, Z = 6, B = 7, O = 3, N = 1, A = 5}.$nl
      This results in the following solution:
      $lstlisting{}{
        698392
        + 3192
        ------
        701584
      }
    }
  }

  $section{Constraint Satisfaction}{
    $enumerate{
      $item{ % 1
        The arc from #N to #W is arc consistent because #{$forall n. $exists w. v(n, w)}. For #{n = 1}, #{v(1, added)} is true, for #{n = 3}, #{v(3, blue)} is true, and for #{n = 5}, #{v(5, stare)} is true.
      }
      $item{ % 2
        The arc from W to N is not arc consistent because #{$forall w. $not$exists n. v(n, w)}. The only word that doesn't have a vowel in any of its 1st, 3rd, or 5th positions is "fever", so by removing "fever", we can achieve arc consistency with the new domain #{W = $braces{added, blue, green, stare}}.
      }
    }
  }

  $section{Programming Questions}{
    $enumerateN{a.}{
      $item{ % a
        $math{
          &@{Variables } A_{i,j} $in $braces{1..9} @{ for } (i, j) $in $braces{1..9}^2 \\
          &$forall i. Alldiff(A_{i, j} @{ for } j $in $braces{1..9}) @{ (all values in same row are different)}\\
          &$forall j. Alldiff(A_{i, j} @{ for } i $in $braces{1..9}) @{ (all values in same column are different)}\\
          &@{For } (@offi, @offj) $in $braces{1, 4, 7}^2 \\
          &$hspace{2em} Alldiff(A_{i, j} @{ for } i $in $braces{@offi, @offi +1, @offi +2}, j $in $braces{@offj, @offj +1, @offj +2}) @{ (all values in same square)}\\
        }
      }
      $item{ % b
        I implemented a general CSP solver in Haskell and applied to to Sudoku.$nl
        The implementation is split among four files.
        $itemize{
          $item{ Backtracking.hs holds a general backtracking computation data type that is used in the main constraint solver. }
          $item{ ConstraintSolver.hs is the general CSP solver. }
          $item{ SudokuSolver.hs uses the constraint solver with Sudoku constraints and variables with a given input. }
          $item{ Main.hs is the program entry point. }
        }
        The program can be build and run using Cabal and the provided package information and Makefile.
      }
      $item{ % c
        The average number of variable assignments required for my algorithm to solve each Sudoku instance is shown below. Note that any trials that took over 10000 assignments were stopped and added as 10000, which accounts for the spikes in the graph.

        $nl
        $graphic{data.png}{}
        $nl

        For most of the problem sizes, the average number of assignments is very close to the minimum required number (81 - number of starting values). However, between 15 and 30 starting values, there are some that clearly take around double the required number, and a couple that have very large averages because they had a trial that maxed out at 10000.
        This suggests that usually this algorithm can assign the variables with very little backtracking, but for some problems it has to search a very large solution space and backtrack a lot.
      }
    }
  }
}


