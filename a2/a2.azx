$import aztex-lib/latex.azx
$import aztex-lib/amsmath.azx

$titlepage{CS 486 - Assignment 2}{Alex Klen \\ 20372654}

@{
  $section{Written Questions} {
    $enumerateN{a.$rparen}{
      $item{ % a
        The algorithm will explore the states in the following order: #{s, f, p, q, r, t, g}.
      }
      $item{ % b
        $enumerateN{i.$rparen}{
          $item{ % i
            #h is admissible because it satisfies the following two criteria. #{h(g) = 0} because the goal is zero steps from itself. For Manhattan Distance, #{h(n) $le h^*(n)} (a heuristic will give a cost from node #n to the goal of at most the cost of the shortest path) because the Manhattan Distance gives the shortest possible number of moves. This is proven below. $newline
            Suppose we have a path #p from #n to #g where #{|p| < h(n)}. #p needs to have at least #{dx = |g.x - n.x|} horizontal moves and at least #{dy = |g.y - n.y|} vertical moves, so #{|p| $ge dx + dy}. But Manhattan Distance is exactly this quantity: #{h(n) = dx + dy}. Then #{|p| $ge dx + dy = h(n)}, a contradiction. $newline
            Therefore, #h is an admissible heuristic function.
          }
          $item{ % ii
            The algorithm will explore the states in the following order: #{s, h, k, c, a, b, d, m, g}. $newline
          }
          $item{ % iii
            The algorithm will explore the states in the following order: #{s, h, k, c, f, p, q, r, t, g}. $newline
            Note that the algorithm might not explore #c , since at that step #c and #f have the same cost plus heuristic value.
          }
        }
      }
    }
  }

  $section{Programming Questions}{
    $enumerateN{A.}{
      $item{ % A
        $bold{Informed Search} $newline
        $enumerateN{a.}{
          $item{ % a
            A state is a partial tour, represented by AStarNode in my implementation. In this case the path A* takes isn't needed to compute the cost of each state, because this information is stored in the state. The reason states need this information is because the heuristic needs to know which cities the tour has visited so far, so a state needs to include the partial tour. $newline$newline
            The initial state is simply a partial tour of only city A. $newline$newline
            Goal states are any states that has a tour of every city - the length of the tour is the number of cities in the problem. $newline$newline
            The operator to get to new states is simply to choose each city not in the current state's tour and append it to the tour. $newline$newline
            The cost of a state is simply the sum of distances of consecutive cities. If the tour is partial, the cost does not include a return edge to the start node. If it is complete, however, it is the full cost of the cycle.
          }
          $item{ % b
            My heuristic function is #{h(n) = max...} % TODO
          }
          $item{ % c
          }
        }
      }
      $item{ % B
        $bold{Local Search} $newline
        $enumerateN{a.}{
          $item{ % a
          }
          $item{ % b
          }
          $item{ % c
          }
          $item{ % d
          }
          $item{ % e
          }
        }
      }
    }
  }
}


